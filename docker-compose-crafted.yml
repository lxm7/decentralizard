services:
  # The main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    volumes:
      - 'app_build:/app/.next'
      - ./:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    # command: sh -c 'HOSTNAME="0.0.0.0" yarn dev'
    command: ['sh', '/scripts/startup.sh']
    restart: always
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    depends_on:
      app_build:
        condition: service_completed_successfully
      # seeder:
      #   condition: service_completed_successfully
  # The one-off container that builds the application
  app_build:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    volumes:
      - 'app_build:/app/.next'
    command: ['yarn', 'build']

  supabase-db:
    image: supabase/postgres:15.8.1.020
    container_name: supabase-db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    env_file:
      - .env
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - supabase-data:/var/lib/postgresql/data
      # docker-entrypoint-initdb.d/ directory is a standard Postgres mechanism
      # for applying SQL scripts automatically when the container first initializes.
      # https://github.com/supabase/supabase/blob/master/docker/volumes/db/roles.sql
      - ./volumes/roles.sql:/docker-entrypoint-initdb.d/99-roles.sql:Z
      - ./volumes/jwt.sql:/docker-entrypoint-initdb.d/99-jwt.sql:Z

  # seeder:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: my-seeder
  #   depends_on:
  #     supabase-db:
  #       condition: service_healthy
  #   command: >
  #     sh -c "yarn migrate && yarn seed"
  #   restart: 'no'

  supabase-auth:
    image: supabase/gotrue:v2.167.0
    container_name: supabase-auth
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:postgres@supabase-db:5432/postgres
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_JWT_SECRET: supersecretkey
      GOTRUE_EXTERNAL_EMAIL_ENABLED: 'true'
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - '9999:9999'

  qqqsupabase-rest:
    image: postgrest/postgrest:v12.2.0
    container_name: supabase-rest
    environment:
      PGRST_DB_URI: postgres://authenticator:postgres@supabase-db:5432/postgres
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: supersecretkey
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - '3001:3000'

  supabase-realtime:
    image: supabase/realtime:v2.33.70
    container_name: supabase-realtime
    environment:
      DB_HOST: supabase-db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      PORT: 4000
      JWT_SECRET: supersecretkey
      DB_SCHEMA: public
      RLIMIT_NOFILE: '10000'
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      APP_NAME: realtime
    depends_on:
      - supabase-db
    ports:
      - '4000:4000'

  supabase-studio:
    image: supabase/studio:20250113-83c9420
    container_name: supabase-studio
    environment:
      SUPABASE_URL: http://localhost:8000
      SUPABASE_KEY: supersecretkey
      POSTGRES_HOST: supabase-db
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
    depends_on:
      - supabase-db
    ports:
      - '8080:8080'

volumes:
  # The volume that is going to store the .next directory where the built
  # application is located
  app_build: {}
  supabase-data: {}
