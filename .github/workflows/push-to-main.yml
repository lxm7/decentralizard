name: Push to main
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Increased from 5
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      SUPABASE_PROJECT_ID: xqhhhtucxbbnapliboaa

    steps:
      # All your existing steps here
      - name: Get Runner IP
        id: ip
        run: |
          RUNNER_IP=$(curl -s https://ipinfo.io/ip)
          echo "Runner IP: $RUNNER_IP"
          echo "ip_address=$RUNNER_IP" >> $GITHUB_OUTPUT

      - name: Whitelist Runner IP in Supabase
        run: |
          curl -X POST "https://api.supabase.com/v1/projects/${SUPABASE_PROJECT_ID}/network-restrictions" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "cidr": "${{ steps.ip.outputs.ip_address }}/32",
              "description": "GitHub Actions Runner"
            }'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ github.sha }}
          restore-keys: docker-buildx-

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.VPS_SSH_DEPLOY }}" | base64 -d > vps_key.pem
          chmod 0600 vps_key.pem
      - name: Prepare the known_hosts
        run: |
          mkdir ~/.ssh/ && touch ~/.ssh/known_hosts
          echo "${{ secrets.VPS_SSH_HOST_KEYS }}" | base64 -d >> ~/.ssh/known_hosts
      - name: Start the deployment of the latest version in the background
        run: |
          DATE=$(date "+%Y%m%d%H%M%S")

          ssh -i vps_key.pem "${{ secrets.VPS_SSH_USERNAME }}@${{ secrets.VPS_IP }}" bash -s <<'EOF'
          set -eo pipefail
          trap 'echo "Error on line $LINENO"; exit 1' ERR

          cd decentralizard
          git fetch origin
          git reset --hard origin/main

          # Set version
          export DEPLOYMENT_VERSION=$(date +%s)

          # Cleanup and build cache
          docker builder prune -af

          # Start new container
          DEPLOYMENT_VERSION=$DEPLOYMENT_VERSION docker compose -f docker-compose.production.yml up -d --force-recreate --build \
            --no-deps \
            --scale app=2

          # Wait for new container healthcheck
          NEW_CONTAINER_ID=$(docker ps -q --filter "label=deployment.version=$DEPLOYMENT_VERSION")
          timeout 300 bash -c "while ! docker exec $NEW_CONTAINER_ID curl -fs http://localhost:3000/api/health; do sleep 5; done"

          # Stop old containers
          OLD_CONTAINERS=$(docker ps -q --filter "label=deployment.version!=$DEPLOYMENT_VERSION")
          [ -z "$OLD_CONTAINERS" ] || docker stop $OLD_CONTAINERS
          EOF
